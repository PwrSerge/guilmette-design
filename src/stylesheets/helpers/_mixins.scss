//============================================================
// Mixins
//============================================================

//
// Typography
//------------------------------------------------------------


// Requires inline-block or block for proper styling
@mixin text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

//emboss Dribble efet
@mixin box-emboss($opacity, $opacity2){
    box-shadow:white($opacity) 0 1px 0,  black($opacity2) 0 1px 0;
};

//text emboss
@mixin text-emboss($opacity, $opacity2){
    text-shadow: white($opacity) 0px 1px 1px ,black($opacity2) -1px -1px 0px ;
};

//Letterpress Dribble efet
@mixin letterpress($opacity){
    text-shadow:white($opacity) 0 1px 0;
};


// A mixin for scaling type that utilises the $type-scale map with the predefined values

@mixin type-scale($scale, $map: $type-scale) {
    $font-size: map-fetch($map, $scale font-size);
    $base-lines: map-fetch($map, $scale base-lines);
    @include adjust-font-size-to($font-size, $base-lines);
}

@mixin type-weight($weight) {
    font-weight: map-get($type-weight, $weight);
}

// A quick ligature mixin, to be updated with a more modular one
@mixin type-ligatures() {
    -moz-font-feature-settings: "liga=1, dlig=1";
    -ms-font-feature-settings: "liga", "dlig";
    -webkit-font-feature-settings: "liga", "dlig";
    -o-font-feature-settings: "liga", "dlig";
    font-feature-settings: "liga", "dlig";
}

// importing google fonts
@mixin gwf($fonts...) {
  $url: "http://fonts.googleapis.com/css?family=";
  $nb: 0;

  @each $font-name in $fonts {
    $nb: $nb + 1;
    $nb-word: 0;

    @each $word in $font-name {
      $nb-word: $nb-word + 1;
      $url: $url + $word;

      @if $nb-word < length($font-name) {
        $url: $url + "+";
      }
    }

    @if $nb < length($fonts) {
       $url: $url + "|";
    }
  }

  @import url(#{$url});
}


//
//Utillity
//--------------------------------------------------------------------

//Modular Media Queries
//http://www.impressivewebs.com/modular-css-media-queries-sass/


@mixin modular-mq($breakpoint) {
  @if $breakpoint == small {
    @media #{$media} and ($feature: $bp-small) { @content; }
  }
  @else if $breakpoint == medium {
    @media #{$media} and ($feature: $bp-medium) { @content; }
  }
  @else if $breakpoint == large {
    @media #{$media} and ($feature: $bp-large) { @content; }
  }
}

// Mixin for reset list
@mixin reset-list {
  list-style: none;
  margin: 0;
  padding: 0;
}

// Webkit-style focus
@mixin tab-focus {
  outline: thin dotted #333;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Navigation
@mixin navigation-list {
  list-style-type:none;
  padding:0;
  margin:0;
  overflow:hidden;
  > li{
      display:block;
      float:left;
      &:last-child{
          margin-right:0px;
      }
  }
};

// set to to false to extend else inject mixin
@mixin cf($extend: true) {
  @if $extend {
    @extend %cf;
  }
  @else {
    *zoom: 1; /* IE 6/7 fallback */
    &:before,
    &:after {
        content: " "; /* 1 */
        display: table; /* 2 */
    }
    &:after {
        line-height: 0;
        clear: both;
    }
  }
}

%cf {
  @include cf($extend: false);
}

